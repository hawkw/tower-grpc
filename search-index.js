var searchIndex = {};
searchIndex["tower_grpc"] = {"doc":"","items":[[3,"Code","tower_grpc","",null,null],[3,"Status","","",null,null],[3,"Request","","",null,null],[3,"Response","","",null,null],[3,"Encode","","A protobuf encoded gRPC response body",null,null],[4,"Error","","",null,null],[13,"Grpc","","",0,null],[13,"Protocol","","",0,null],[13,"Decode","","",0,null],[13,"Inner","","",0,null],[4,"ProtocolError","","",null,null],[13,"MissingTrailers","","",1,null],[13,"MissingMessage","","",1,null],[13,"UnexpectedEof","","",1,null],[13,"Internal","","",1,null],[13,"UnsupportedCompressionFlag","","",1,null],[0,"client","","",null,null],[3,"Grpc","tower_grpc::client","",null,null],[0,"unary","","",null,null],[3,"ResponseFuture","tower_grpc::client::unary","",null,null],[6,"Once","","",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"client_streaming","tower_grpc::client","",null,null],[3,"ResponseFuture","tower_grpc::client::client_streaming","",null,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"server_streaming","tower_grpc::client","",null,null],[3,"ResponseFuture","tower_grpc::client::server_streaming","",null,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",4,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"streaming","tower_grpc::client","",null,null],[3,"ResponseFuture","tower_grpc::client::streaming","",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[8,"Encodable","tower_grpc::client","Convert a stream of protobuf messages to an HTTP body payload.",null,null],[10,"into_encode","","",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Grpc` instance backed by the given HTTP service.",7,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"poll_ready","","",7,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"unary","","",7,{"i":[{"n":"self"},{"n":"request"},{"n":"pathandquery"}],"o":{"n":"responsefuture"}}],[11,"client_streaming","","",7,{"i":[{"n":"self"},{"n":"request"},{"n":"pathandquery"}],"o":{"n":"responsefuture"}}],[11,"server_streaming","","",7,{"i":[{"n":"self"},{"n":"request"},{"n":"pathandquery"}],"o":{"n":"responsefuture"}}],[11,"streaming","","Initiate a full streaming gRPC request",7,{"i":[{"n":"self"},{"n":"request"},{"n":"pathandquery"}],"o":{"n":"responsefuture"}}],[0,"generic","tower_grpc","gRPC generic over encoder / decoder.",null,null],[3,"Streaming","tower_grpc::generic","An stream of inbound gRPC messages",null,null],[3,"Encode","","Encodes gRPC message types",null,null],[3,"EncodeBuf","","A buffer to encode a message into.",null,null],[3,"DecodeBuf","","A buffer to decode messages from.",null,null],[4,"Direction","","Whether this is reading a request or a response stream value.",null,null],[13,"Request","","For requests, we expect only headers and the streaming body.",8,null],[13,"Response","","For responses, the received HTTP status code must be provided. We also expect to receive trailers after the streaming body.",8,null],[0,"server","","",null,null],[3,"Grpc","tower_grpc::generic::server","",null,null],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"grpc"}}],[11,"new","","",9,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"unary","","",9,{"i":[{"n":"self"},{"n":"s"},{"n":"request"}],"o":{"g":["streaming"],"n":"responsefuture"}}],[11,"client_streaming","","",9,{"i":[{"n":"self"},{"n":"s"},{"n":"request"}],"o":{"n":"responsefuture"}}],[11,"server_streaming","","",9,{"i":[{"n":"self"},{"n":"s"},{"n":"request"}],"o":{"g":["streaming"],"n":"responsefuture"}}],[11,"streaming","","",9,{"i":[{"n":"self"},{"n":"s"},{"n":"request"}],"o":{"n":"responsefuture"}}],[0,"client_streaming","","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::client_streaming","",null,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",10,{"i":[{"n":"t"},{"n":"e"}],"o":{"n":"self"}}],[11,"poll","","",10,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"server_streaming","tower_grpc::generic::server","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::server_streaming","A server streaming response future",null,null],[11,"new","","",11,{"i":[{"n":"t"},{"n":"request"},{"n":"e"}],"o":{"n":"self"}}],[11,"poll","","",11,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"streaming","tower_grpc::generic::server","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::streaming","",null,null],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",12,{"i":[{"n":"t"},{"n":"e"}],"o":{"n":"self"}}],[11,"poll","","",12,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"unary","tower_grpc::generic::server","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::unary","",null,null],[3,"Once","","",null,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",14,{"i":[{"n":"t"},{"n":"request"},{"n":"e"}],"o":{"n":"self"}}],[11,"poll","","",14,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"poll","","",13,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"StreamingService","tower_grpc::generic::server","A specialization of tower_service::Service.",null,null],[16,"Request","","Protobuf request message type",15,null],[16,"RequestStream","","Stream of inbound request messages",15,null],[16,"Response","","Protobuf response message type",15,null],[16,"ResponseStream","","Stream of outbound response messages",15,null],[16,"Future","","Response future",15,null],[10,"call","","Call the service",15,null],[8,"UnaryService","","A specialization of tower_service::Service.",null,null],[16,"Request","","Protobuf request message type",16,null],[16,"Response","","Protobuf response message type",16,null],[16,"Future","","Response future",16,null],[10,"call","","Call the service",16,null],[8,"ClientStreamingService","","A specialization of tower_service::Service.",null,null],[16,"Request","","Protobuf request message type",17,null],[16,"RequestStream","","Stream of inbound request messages",17,null],[16,"Response","","Protobuf response message type",17,null],[16,"Future","","Response future",17,null],[10,"call","","Call the service",17,null],[8,"ServerStreamingService","","A specialization of tower_service::Service.",null,null],[16,"Request","","Protobuf request message type",18,null],[16,"Response","","Protobuf response message type",18,null],[16,"ResponseStream","","Stream of outbound response messages",18,null],[16,"Future","","Response future",18,null],[10,"call","","Call the service",18,null],[11,"fmt","tower_grpc::generic","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"direction"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_end_stream","","",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"poll_data","","",19,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"poll_trailers","","",19,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"poll","","",20,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"reserve","","",21,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remaining_mut","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"advance_mut","","",21,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"bytes_mut","","",21,null],[11,"remaining","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",22,null],[11,"advance","","",22,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"drop","","",22,{"i":[{"n":"self"}]}],[8,"Codec","","Encodes and decodes gRPC message types",null,null],[18,"CONTENT_TYPE","","The content-type header for messages using this encoding.",23,null],[16,"Encode","","The encode type",23,null],[16,"Encoder","","Encoder type",23,null],[16,"Decode","","The decode type",23,null],[16,"Decoder","","Decoder type",23,null],[10,"encoder","","Returns a new encoder",23,null],[10,"decoder","","Returns a new decoder",23,null],[8,"Encoder","","Encodes gRPC message types",null,null],[16,"Item","","Type that is encoded",24,null],[10,"encode","","Encode a message into the provided buffer.",24,null],[8,"Decoder","","Decodes gRPC message types",null,null],[16,"Item","","Type that is decoded",25,null],[10,"decode","","Decode a message from the buffer.",25,{"i":[{"n":"self"},{"n":"decodebuf"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tower_grpc","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new gRPC request",26,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"get_ref","","Get a reference to the message",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Get a mutable reference to the message",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"headers","","Get a reference to the request headers.",26,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"headers_mut","","Get a mutable reference to the request headers.",26,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"into_inner","","Consumes `self`, returning the message",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from_http","","Convert an HTTP request to a gRPC request",26,{"i":[{"n":"request"}],"o":{"n":"self"}}],[11,"into_http","","",26,{"i":[{"n":"self"},{"n":"uri"}],"o":{"n":"request"}}],[11,"map","","",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"request"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",27,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"get_ref","","Get a reference to the message",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Get a mutable reference to the message",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes `self`, returning the message",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_http","","",27,{"i":[{"n":"self"}],"o":{"n":"response"}}],[11,"map","","",27,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"response"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"status"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"code"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"code"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"code"}],"o":{"n":"bool"}}],[11,"code","","",28,{"i":[{"n":"self"}],"o":{"n":"code"}}],[18,"OK","","",28,null],[18,"CANCELED","","",28,null],[18,"UNKNOWN","","",28,null],[18,"INVALID_ARGUMENT","","",28,null],[18,"DEADLINE_EXCEEDED","","",28,null],[18,"NOT_FOUND","","",28,null],[18,"ALREADY_EXISTS","","",28,null],[18,"PERMISSION_DENIED","","",28,null],[18,"RESOURCE_EXHAUSTED","","",28,null],[18,"FAILED_PRECONDITION","","",28,null],[18,"ABORTED","","",28,null],[18,"OUT_OF_RANGE","","",28,null],[18,"UNIMPLEMENTED","","",28,null],[18,"INTERNAL","","",28,null],[18,"UNAVAILABLE","","",28,null],[18,"DATA_LOSS","","",28,null],[18,"UNAUTHENTICATED","","",28,null],[11,"to_header_value","","",28,{"i":[{"n":"self"}],"o":{"n":"headervalue"}}],[11,"from","","",28,{"i":[{"n":"error"}],"o":{"n":"self"}}],[18,"OK","","",29,null],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"server","","",null,null],[3,"Grpc","tower_grpc::server","",null,null],[0,"client_streaming","","",null,null],[3,"ResponseFuture","tower_grpc::server::client_streaming","",null,null],[11,"poll","","",30,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"server_streaming","tower_grpc::server","",null,null],[3,"ResponseFuture","tower_grpc::server::server_streaming","",null,null],[11,"poll","","",31,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"streaming","tower_grpc::server","",null,null],[3,"ResponseFuture","tower_grpc::server::streaming","",null,null],[11,"poll","","",32,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"unary","tower_grpc::server","",null,null],[3,"ResponseFuture","tower_grpc::server::unary","",null,null],[11,"poll","","",33,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","tower_grpc::server","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"grpc"}}],[11,"unary","","",34,{"i":[{"n":"t"},{"n":"request"}],"o":{"n":"responsefuture"}}],[11,"client_streaming","","",34,{"i":[{"n":"t"},{"n":"request"}],"o":{"n":"responsefuture"}}],[11,"server_streaming","","",34,{"i":[{"n":"t"},{"n":"request"}],"o":{"n":"responsefuture"}}],[11,"streaming","","",34,{"i":[{"n":"t"},{"n":"request"}],"o":{"n":"responsefuture"}}],[0,"codegen","tower_grpc","Type re-exports used by generated code",null,null],[0,"server","tower_grpc::codegen","Type re-exports used by generated server code",null,null],[0,"grpc","tower_grpc::codegen::server","Re-export types from this crate",null,null],[3,"Request","tower_grpc::codegen::server::grpc","",null,null],[3,"Response","","",null,null],[3,"Status","","",null,null],[3,"Encode","","A protobuf encoded gRPC response body",null,null],[4,"Error","","",null,null],[13,"Grpc","","",0,null],[13,"Protocol","","",0,null],[13,"Decode","","",0,null],[13,"Inner","","",0,null],[6,"Streaming","","A stream of inbound gRPC messages",null,null],[0,"bytes","tower_grpc::codegen::server","Re-export types from the `bytes` crate.",null,null],[3,"Bytes","tower_grpc::codegen::server::bytes","A reference counted contiguous slice of memory.",null,null],[0,"futures","tower_grpc::codegen::server","Re-export types from the `future` crate.",null,null],[8,"Future","tower_grpc::codegen::server::futures","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"i":[{"n":"self"}],"o":{"n":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",36,null],[16,"Error","","The type of error this stream may generate.",36,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",36,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",36,{"i":[{"n":"self"}],"o":{"n":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",36,{"i":[{"n":"self"}],"o":{"n":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",36,{"i":[{"n":"self"}],"o":{"n":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",36,{"i":[{"n":"self"}],"o":{"n":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",36,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",36,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",36,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",36,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",36,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",36,{"i":[{"n":"self"}],"o":{"n":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",36,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",36,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",36,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",36,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",36,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",36,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",36,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",36,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",36,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"zip"}}],[11,"chain","","Adapter for chaining two stream.",36,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",36,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",36,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",36,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",36,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",36,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",37,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",37,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"i":[{"n":"t"}],"o":{"n":"futureresult"}}],[0,"http","tower_grpc::codegen::server","Re-exported types from the `http` crate.",null,null],[3,"Request","tower_grpc::codegen::server::http","Represents an HTTP request.",null,null],[3,"Response","","Represents an HTTP response",null,null],[3,"HeaderMap","","A set of HTTP headers",null,null],[0,"h2","tower_grpc::codegen::server","Re-exported types from the `h2` crate.",null,null],[3,"Error","tower_grpc::codegen::server::h2","Represents HTTP/2.0 operation errors.",null,null],[0,"tower_h2","tower_grpc::codegen::server","Re-export types from the `tower_h2` crate",null,null],[8,"Body","tower_grpc::codegen::server::tower_h2","A generic h2 client/server request/response body.",null,null],[16,"Data","","The body chunk type",38,null],[11,"is_end_stream","","Returns `true` when the end of stream has been reached.",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"poll_data","","Polls a stream of data.",38,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_trailers","","Returns possibly one `HeaderMap` for trailers.",38,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[3,"RecvBody","","Allows a stream to be read from the remote.",null,null],[0,"tower","tower_grpc::codegen::server","Re-exported types from the `tower` crate.",null,null],[8,"Service","tower_grpc::codegen::server::tower","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",39,null],[16,"Response","","Responses given by the service.",39,null],[16,"Error","","Errors produced by the service.",39,null],[16,"Future","","The future response value.",39,null],[11,"ready","","A future yielding the service when it is ready to accept a request.",39,{"i":[{"n":"self"}],"o":{"n":"ready"}}],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",39,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[10,"call","","Process the request and return the response asynchronously.",39,null],[8,"NewService","","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",40,null],[16,"Response","","Responses given by the service",40,null],[16,"Error","","Errors produced by the service",40,null],[16,"Service","","The `Service` value created by this factory",40,null],[16,"InitError","","Errors produced while building a service.",40,null],[16,"Future","","The future of the `Service` instance.",40,null],[10,"new_service","","Create and return a new service value asynchronously.",40,null],[0,"client","tower_grpc::codegen","",null,null],[0,"grpc","tower_grpc::codegen::client","Re-export types from this crate",null,null],[3,"Request","tower_grpc::codegen::client::grpc","",null,null],[3,"Response","","",null,null],[3,"Status","","",null,null],[4,"Error","","",null,null],[13,"Grpc","","",0,null],[13,"Protocol","","",0,null],[13,"Decode","","",0,null],[13,"Inner","","",0,null],[0,"http","tower_grpc::codegen::client","",null,null],[3,"Uri","tower_grpc::codegen::client::http","The URI component of a request.",null,null],[3,"PathAndQuery","","Represents the path component of a URI",null,null],[0,"futures","tower_grpc::codegen::client","Re-export types from the `future` crate.",null,null],[8,"Future","tower_grpc::codegen::client::futures","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"i":[{"n":"self"}],"o":{"n":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"tower_h2","tower_grpc::codegen::client","",null,null],[8,"HttpService","tower_grpc::codegen::client::tower_h2","An HTTP service",null,null],[16,"RequestBody","","Request payload.",41,null],[16,"ResponseBody","","Response payload.",41,null],[16,"Error","","Errors produced by the service.",41,null],[16,"Future","","The future response value.",41,null],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",41,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[10,"call","","Process the request and return the response asynchronously.",41,null],[11,"lift","","Wrap the HttpService so that it implements tower_service::Service directly.",41,{"i":[{"n":"self"}],"o":{"n":"liftservice"}}],[11,"lift_ref","","Same as `lift` but operates on an HttpService reference.",41,{"i":[{"n":"self"}],"o":{"n":"liftserviceref"}}],[11,"is_end_stream","tower_grpc","",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"poll_data","","",42,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"poll_trailers","","",42,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Streaming","","A stream of inbound gRPC messages",null,null],[18,"CONTENT_TYPE","tower_grpc::generic","The content-type header for messages using this encoding.",23,null],[11,"from","tower_grpc::codegen::server::h2","",43,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",43,{"i":[{"n":"status"}],"o":{"n":"self"}}],[11,"with_capacity","tower_grpc::codegen::server::bytes","Creates a new `Bytes` with the specified capacity.",44,{"i":[{"n":"usize"}],"o":{"n":"bytes"}}],[11,"new","","Creates a new empty `Bytes`.",44,{"o":{"n":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",44,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",44,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",44,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",44,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",44,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"slice_ref","","Returns a slice of self that is equivalent to the given `subset`.",44,null],[11,"split_off","","Splits the bytes into two at the given index.",44,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",44,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",44,null],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",44,null],[11,"clear","","Clears the buffer, removing all data.",44,null],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",44,{"i":[{"n":"self"}],"o":{"g":["bytesmut","bytes"],"n":"result"}}],[11,"extend_from_slice","","Appends given bytes to this object.",44,null],[11,"as_ref","","",44,null],[11,"from","","",44,{"i":[{"n":"string"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"bytesmut"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"str"}],"o":{"n":"bytes"}}],[11,"from","","",44,null],[11,"from_buf","","",44,{"i":[{"n":"t"}],"o":{"n":"bytes"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"vec"}],"o":{"n":"bool"}}],[11,"eq","","",44,null],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"bytes"}],"o":{"n":"bool"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"n":"bool"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"cmp","","",44,{"i":[{"n":"self"},{"n":"bytes"}],"o":{"n":"ordering"}}],[11,"from_iter","","",44,{"i":[{"n":"t"}],"o":{"n":"bytes"}}],[11,"default","","",44,{"o":{"n":"bytes"}}],[11,"borrow","","",44,null],[11,"deref","","",44,null],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"into_buf","","",44,null],[11,"extend","","",44,null],[11,"extend","","",44,null],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"bytes"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",44,null],[11,"into_iter","","",44,null],[11,"hash","","",44,null],[11,"clone","tower_grpc::codegen::server::futures","",37,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"futureresult"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"poll","","",45,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"from","","",45,{"i":[{"n":"result"}],"o":{"n":"futureresult"}}],[11,"from","","",37,{"i":[{"n":"t"}],"o":{"n":"async"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","tower_grpc::codegen::server::bytes","",44,{"i":[{"n":"pathandquery"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"scheme"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"headername"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"bytestr"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"authority"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"headervalue"}],"o":{"n":"bytes"}}],[11,"from","","",44,{"i":[{"n":"custom"}],"o":{"n":"bytes"}}],[11,"fmt","tower_grpc::codegen::client::http","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"pathandquery"}],"o":{"n":"bool"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","tower_grpc::codegen::server::http","",48,{"i":[{"n":"self"},{"n":"headermap"}],"o":{"n":"bool"}}],[11,"eq","tower_grpc::codegen::client::http","",47,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"uri"}],"o":{"n":"bool"}}],[11,"try_from","","",46,{"i":[{"n":"string"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",46,{"i":[{"n":"uri"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",46,{"i":[{"n":"parts"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",46,{"i":[{"n":"str"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",46,{"i":[{"n":"uri"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",46,{"i":[{"n":"bytes"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",46,{"i":[{"n":"string"}],"o":{"g":["uri"],"n":"result"}}],[11,"clone","tower_grpc::codegen::server::http","",48,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"clone","tower_grpc::codegen::client::http","",47,{"i":[{"n":"self"}],"o":{"n":"pathandquery"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"from_str","","",47,{"i":[{"n":"str"}],"o":{"g":["pathandquery","invaliduri"],"n":"result"}}],[11,"from_str","","",46,{"i":[{"n":"str"}],"o":{"g":["uri","invaliduri"],"n":"result"}}],[11,"index","tower_grpc::codegen::server::http","Panics Using the index operator will cause a panic if the header you're querying isn't set.",48,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"t"}}],[11,"from_iter","","",48,{"i":[{"n":"i"}],"o":{"n":"headermap"}}],[11,"default","","",49,{"o":{"n":"request"}}],[11,"default","","",50,{"o":{"n":"response"}}],[11,"default","tower_grpc::codegen::client::http","",46,{"o":{"n":"uri"}}],[11,"default","tower_grpc::codegen::server::http","",48,{"o":{"n":"headermap"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tower_grpc::codegen::client::http","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tower_grpc::codegen::server::http","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tower_grpc::codegen::client::http","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"extend","tower_grpc::codegen::server::http","",48,null],[11,"extend","","Extend a `HeaderMap` with the contents of another `HeaderMap`.",48,null],[11,"partial_cmp","tower_grpc::codegen::client::http","",47,{"i":[{"n":"self"},{"n":"pathandquery"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",47,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"into_iter","tower_grpc::codegen::server::http","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitary order. The map cannot be used after calling this.",48,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"hash","tower_grpc::codegen::client::http","",46,null],[11,"from","tower_grpc::codegen::server::h2","",43,{"i":[{"n":"senderror"}],"o":{"n":"error"}}],[11,"from","","",43,{"i":[{"n":"reason"}],"o":{"n":"error"}}],[11,"from","","",43,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",43,{"i":[{"n":"usererror"}],"o":{"n":"error"}}],[11,"from","","",43,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",43,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"is_end_stream","tower_grpc::codegen::server::tower_h2","",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"poll_data","","",51,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_trailers","","",51,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"from","tower_grpc::codegen::server::bytes","",44,{"i":[{"n":"data"}],"o":{"n":"bytes"}}],[11,"default","tower_grpc::codegen::server::tower_h2","",51,{"o":{"n":"recvbody"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"map","tower_grpc::codegen::server::futures","Change the success value of this `Async` with the closure provided",37,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"builder","tower_grpc::codegen::server::http","Creates a new builder-style object to manufacture a `Request`",49,{"o":{"n":"builder"}}],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",49,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"new","","Creates a new blank `Request` with the body",49,{"i":[{"n":"t"}],"o":{"n":"request"}}],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",49,{"i":[{"n":"parts"},{"n":"t"}],"o":{"n":"request"}}],[11,"method","","Returns a reference to the associated HTTP method.",49,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",49,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"uri","","Returns a reference to the associated URI.",49,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"uri_mut","","Returns a mutable reference to the associated URI.",49,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"version","","Returns the associated version.",49,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",49,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",49,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",49,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",49,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",49,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",49,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",49,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_body","","Consumes the request, returning just the body.",49,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the request returning the head and body parts.",49,null],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",49,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"request"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",50,{"o":{"n":"builder"}}],[11,"new","","Creates a new blank `Response` with the body",50,{"i":[{"n":"t"}],"o":{"n":"response"}}],[11,"from_parts","","Creates a new `Response` with the given head and body",50,{"i":[{"n":"parts"},{"n":"t"}],"o":{"n":"response"}}],[11,"status","","Returns the `StatusCode`.",50,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",50,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"version","","Returns a reference to the associated version.",50,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",50,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",50,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",50,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",50,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",50,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",50,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",50,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_body","","Consumes the response, returning just the body.",50,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the response returning the head and body parts.",50,null],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",50,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"response"}}],[11,"new","","Create an empty `HeaderMap`.",48,{"o":{"g":["headervalue"],"n":"headermap"}}],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",48,{"i":[{"n":"usize"}],"o":{"n":"headermap"}}],[11,"len","","Returns the number of headers stored in the map.",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"keys_len","","Returns the number of keys stored in the map.",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",48,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",48,null],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",48,null],[11,"get","","Returns a reference to the value associated with the key.",48,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",48,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get_all","","Returns a view of all values associated with a key.",48,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"getall"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",48,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"bool"}}],[11,"iter","","An iterator visiting all key-value pairs.",48,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",48,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"keys","","An iterator visiting all keys.",48,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","An iterator visiting all values.",48,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"values_mut","","An iterator visiting all values mutably.",48,{"i":[{"n":"self"}],"o":{"n":"valuesmut"}}],[11,"drain","","Clears the map, returning all entries as an iterator.",48,{"i":[{"n":"self"}],"o":{"n":"drain"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",48,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["entry","invalidheadername"],"n":"result"}}],[11,"insert","","Inserts a key-value pair into the map.",48,{"i":[{"n":"self"},{"n":"k"},{"n":"t"}],"o":{"n":"option"}}],[11,"append","","Inserts a key-value pair into the map.",48,{"i":[{"n":"self"},{"n":"k"},{"n":"t"}],"o":{"n":"bool"}}],[11,"remove","","Removes a key from the map, returning the value associated with the key.",48,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"reason","tower_grpc::codegen::server::h2","If the error was caused by the remote peer, the error reason.",43,{"i":[{"n":"self"}],"o":{"g":["reason"],"n":"option"}}],[11,"stream_id","tower_grpc::codegen::server::tower_h2","Returns the stream ID of the received stream, or `None` if this body does not correspond to a stream.",51,{"i":[{"n":"self"}],"o":{"g":["streamid"],"n":"option"}}],[11,"from_parts","tower_grpc::codegen::client::http","Attempt to convert a `Uri` from `Parts`",46,{"i":[{"n":"parts"}],"o":{"g":["uri","invaliduriparts"],"n":"result"}}],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",46,{"i":[{"n":"bytes"}],"o":{"g":["uri","invaliduribytes"],"n":"result"}}],[11,"from_static","","Convert a `Uri` from a static string.",46,{"i":[{"n":"str"}],"o":{"n":"uri"}}],[11,"into_parts","","Convert a `Uri` into `Parts`.",46,{"i":[{"n":"self"}],"o":{"n":"parts"}}],[11,"path_and_query","","Returns the path & query components of the Uri",46,{"i":[{"n":"self"}],"o":{"g":["pathandquery"],"n":"option"}}],[11,"path","","Get the path of this `Uri`.",46,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"scheme_part","","Get the scheme of this `Uri`.",46,{"i":[{"n":"self"}],"o":{"g":["scheme"],"n":"option"}}],[11,"authority_part","","Get the authority of this `Uri`.",46,{"i":[{"n":"self"}],"o":{"g":["authority"],"n":"option"}}],[11,"host","","Get the host of this `Uri`.",46,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"port","","Get the port of this `Uri`.",46,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",46,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"from_shared","","Attempt to convert a `PathAndQuery` from `Bytes`.",47,{"i":[{"n":"bytes"}],"o":{"g":["pathandquery","invaliduribytes"],"n":"result"}}],[11,"from_static","","Convert a `PathAndQuery` from a static string.",47,{"i":[{"n":"str"}],"o":{"n":"pathandquery"}}],[11,"path","","Returns the path component",47,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"query","","Returns the query string component",47,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"as_str","","Returns the path and query as a string component.",47,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_bytes","","Converts this `PathAndQuery` back to a sequence of bytes",47,{"i":[{"n":"self"}],"o":{"n":"bytes"}}]],"paths":[[4,"Error"],[4,"ProtocolError"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[8,"Encodable"],[3,"Grpc"],[4,"Direction"],[3,"Grpc"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"Once"],[3,"ResponseFuture"],[8,"StreamingService"],[8,"UnaryService"],[8,"ClientStreamingService"],[8,"ServerStreamingService"],[3,"Encode"],[3,"Streaming"],[3,"EncodeBuf"],[3,"DecodeBuf"],[8,"Codec"],[8,"Encoder"],[8,"Decoder"],[3,"Request"],[3,"Response"],[3,"Status"],[3,"Code"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"Grpc"],[8,"Future"],[8,"Stream"],[4,"Async"],[8,"Body"],[8,"Service"],[8,"NewService"],[8,"HttpService"],[3,"Encode"],[3,"Error"],[3,"Bytes"],[3,"FutureResult"],[3,"Uri"],[3,"PathAndQuery"],[3,"HeaderMap"],[3,"Request"],[3,"Response"],[3,"RecvBody"]]};
initSearch(searchIndex);
